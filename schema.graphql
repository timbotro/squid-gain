type Account @entity {
  "Account address"
  id: ID!
  balance: BigInt!
  historicalBalances: [HistoricalBalance!] @derivedFrom(field: "account")
}

type HistoricalBalance @entity {
  id: ID!
  account: Account!
  balance: BigInt!
  date: DateTime!
}

type Swap @entity {
  timestamp: BigInt
  fromCurrency: Currency
  toCurrency: Currency
  fromAmount: BigInt
  toAmount: BigInt
}

type LiquidityChange @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: Int!
  eventIdx: Int!
  step: Int!
  reason: LiquidityChangeReason!
  currencyZero: String!
  currencyOne: String!
  amountZero: BigInt!
  amountOne: BigInt!
  balanceZero: BigInt!
  balanceOne: BigInt!
  #   currencies: [Currency]
}

enum LiquidityChangeReason {
  INIT
  SWAP
  ADD
  REMOVE
}

type Currency @entity {
  currencyName: String! @index
  decimals: Int
  volumeDayHistory: [CurrVolumeDay] @derivedFrom(field: "currency")
  liquidityHistory: [CurrLiquidity] @derivedFrom(field: "currency")
  priceHistory: [CurrPrice] @derivedFrom(field: "currency")
  #   transactions: [LiquidityChange!]!
}

type CurrPrice @entity {
  currency: Currency
  usdPrice: Float
  timestamp: DateTime
}

type CurrVolumeDay @entity {
  currency: Currency
  timestamp: DateTime
  volumeDayNative: BigInt
  volumeDayUSD: Float
}

type CurrLiquidity @entity {
  currency: Currency
  timestamp: DateTime
  liquidity: BigInt
  liquidityUSD: Float
}

type Pool @entity {
  currency0: String!
  currency1: String!
  volumeDaysDay: [PoolVolumeDay] @derivedFrom(field: "pool")
  liquidityHistory: [PoolLiquidity] @derivedFrom(field: "pool")
  # poolOperations: [LiquidityChange] @derivedFrom(field: "pool")
}

type PoolVolumeDay @entity {
  pool: Pool
  timestamp: DateTime
  volumeDayUSD: Float
}

type PoolLiquidity @entity {
  pool: Pool
  timestamp: DateTime
  token0Liquidity: BigInt
  token1Liquidity: BigInt
  usdTotalLiquidity: Float
}

type OverviewHistory @entity {
  totalLiquidity: BigInt
  totalVolumeDay: BigInt
  timestamp: DateTime
}
